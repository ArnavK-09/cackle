// This is your Prisma schema file,

// prisma client 
generator client {
  provider = "prisma-client-js"
}

// db config 
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Model 
model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  name         String?
  username     String         @unique
  password     String
  pfp          String         @default("https://picsum.photos/200/200")
  createdAt    DateTime       @default(now())
  // relations 
  refreshToken RefreshToken[]
  tweets       Post[]
  mediaFiles   MediaFile[]
}

// Post 
model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // Author
  author     User        @relation(fields: [authorId], references: [id])
  authorId   String      @db.ObjectId
  replyToId  String?     @db.ObjectId
  replyTo    Post?      @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Post[]     @relation("replies")
  // MediaFiles
  mediaFiles MediaFile[]
}

// Token 
model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

// Media File 
model MediaFile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  providerPublicId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // User
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.ObjectId
  // Tweets
  post            Post?   @relation(fields: [postId], references: [id])
  postId          String?  @db.ObjectId
}
